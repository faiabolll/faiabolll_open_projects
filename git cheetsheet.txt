git add <file> - добавляет файл в очередь на коммит; или же индексирует файл

git commit - производит коммит и сарзу же просит написать комментарии к нему
git commit -m <text> - производит коммит и в качестве комментария берет <text>
git status - показывает статус изменений, а также состояние очереди на коммит
git config --global user.name 'faiabolll' - задаёт имя пользователя
git config --global user.email 'faiabolll@lol.com' - задаёт электронную почту пользователя
git config --global core.autocrlf <bool (true, false)> - ???????????
git config --global core.safecrlf <bool (true, false) or codename (warn, fatal)> - задаёт параметры отображения ошибок
git config --global alias.ci commit - создаёт сокращение для кодовых имён
Список распространенных сокращений, общепринятых:
git config --global alias.co checkout
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.hist "log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
git config --global alias.type 'cat-file -t'
git config --global alias.dump 'cat-file -p' 
Настройки отображения логов:
git log --pretty=oneline --max-count=2
git log --pretty=oneline --since='5 minutes ago'
git log --pretty=oneline --until='5 minutes ago'
git log --pretty=oneline --author=<your name>
git log --pretty=oneline --all
Более менее нормальный вариант: 
git log --all --pretty=format:"%h %cd %s (%an)" --since='7 days ago'
Параметры:
--pretty="..." defines the output format.
%h is the abbreviated hash of the commit
%d commit decorations (e.g. branch heads or tags)
%ad is the commit date
%s is the comment
%an is the name of the author
--graph tells git to display the commit tree in the form of an ASCII graph layout
--date=short keeps the date format short and nice
Весь конфиг находится в .gitconfig
Сокращения для файла .profile:
alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gc='git commit'
alias gd='git diff'
alias gco='git checkout '
alias gk='gitk --all&'
alias gx='gitx --all'
alias got='git '
alias get='git '

git checkout <hash> - переносит состояние git во время коммита с данным хэшем
git checkout master - возвращается в состояние матсера (по сути в современное)

git tag v1 - присваивает данному состоянию данный тэг (чтобы использовать вместо хэша)
git hist v0.9 - показывает историю в данный момент времени (время==v0.9)

git checkout hello.html - если были сделаны какие-либо изменения, но они не были закоммичены,
то возвращает файл в состояние, соответствующему тому, в которому сейчас мы находимся

git checkout v1^ - вернуться в состояние родителя v1 

git reset HEAD hello.html - отменяет индексацию файла, т.е. результат выполнения git add hello.html, но не убирает изменения
Чтобы убрать изменения необходимо сделать 

git revert HEAD --no-edit - создаёт коммит, который отменяет последний

git reset --hard selected_tag - удаляет коммиты из ветки и возвращает в состояние selected_tag

git tag -d oops - удаление тэга oops

git commit --amend -m "Add stuff and amend commit" - дополняет нынешний коммит